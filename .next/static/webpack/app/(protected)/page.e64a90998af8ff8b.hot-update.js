"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(protected)/page",{

/***/ "(app-pages-browser)/./src/lib/api/messages.ts":
/*!*********************************!*\
  !*** ./src/lib/api/messages.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   messagesApi: function() { return /* binding */ messagesApi; }\n/* harmony export */ });\n/* harmony import */ var _client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./client */ \"(app-pages-browser)/./src/lib/api/client.ts\");\n\nconst messagesApi = {\n    sendMessage: async function(channelId, content) {\n        let type = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"TEXT\";\n        console.log(\"Sending message:\", {\n            channelId,\n            content,\n            type\n        });\n        const requestBody = {\n            content,\n            type\n        };\n        try {\n            const response = await _client__WEBPACK_IMPORTED_MODULE_0__.apiClient.post(\"/channels/\".concat(channelId, \"/messages\"), requestBody);\n            console.log(\"Message sent successfully:\", response);\n            // Transform the response to match our Message interface\n            return {\n                id: response.id,\n                content: response.content,\n                channelId,\n                userId: response.user.id,\n                username: response.user.username,\n                type: response.type,\n                createdAt: response.createdAt,\n                updatedAt: response.updatedAt\n            };\n        } catch (error) {\n            console.error(\"Failed to send message:\", error);\n            throw error;\n        }\n    },\n    getChannelMessages: async (channelId)=>{\n        if (!channelId) {\n            console.error(\"No channel ID provided to getChannelMessages\");\n            return [];\n        }\n        console.log(\"Fetching messages for channel:\", channelId);\n        try {\n            const response = await _client__WEBPACK_IMPORTED_MODULE_0__.apiClient.get(\"/channels/\".concat(channelId, \"/messages\"));\n            console.log(\"Received messages:\", response);\n            // Transform the response to match our Message interface\n            const messages = (response.content || []).map((msg)=>({\n                    id: msg.id,\n                    content: msg.content,\n                    channelId,\n                    userId: msg.user.id,\n                    username: msg.user.username,\n                    type: msg.type,\n                    createdAt: msg.createdAt,\n                    updatedAt: msg.updatedAt\n                })).sort((a, b)=>new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());\n            return messages;\n        } catch (error) {\n            console.error(\"Error fetching messages:\", error);\n            throw error;\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvYXBpL21lc3NhZ2VzLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXFDO0FBa0M5QixNQUFNQyxjQUFjO0lBQ3pCQyxhQUFhLGVBQU9DLFdBQW1CQztZQUFpQkMsd0VBQW9CO1FBQzFFQyxRQUFRQyxHQUFHLENBQUMsb0JBQW9CO1lBQUVKO1lBQVdDO1lBQVNDO1FBQUs7UUFDM0QsTUFBTUcsY0FBb0M7WUFDeENKO1lBQ0FDO1FBQ0Y7UUFFQSxJQUFJO1lBQ0YsTUFBTUksV0FBVyxNQUFNVCw4Q0FBU0EsQ0FBQ1UsSUFBSSxDQUFrQixhQUF1QixPQUFWUCxXQUFVLGNBQVlLO1lBQzFGRixRQUFRQyxHQUFHLENBQUMsOEJBQThCRTtZQUUxQyx3REFBd0Q7WUFDeEQsT0FBTztnQkFDTEUsSUFBSUYsU0FBU0UsRUFBRTtnQkFDZlAsU0FBU0ssU0FBU0wsT0FBTztnQkFDekJEO2dCQUNBUyxRQUFRSCxTQUFTSSxJQUFJLENBQUNGLEVBQUU7Z0JBQ3hCRyxVQUFVTCxTQUFTSSxJQUFJLENBQUNDLFFBQVE7Z0JBQ2hDVCxNQUFNSSxTQUFTSixJQUFJO2dCQUNuQlUsV0FBV04sU0FBU00sU0FBUztnQkFDN0JDLFdBQVdQLFNBQVNPLFNBQVM7WUFDL0I7UUFDRixFQUFFLE9BQU9DLE9BQU87WUFDZFgsUUFBUVcsS0FBSyxDQUFDLDJCQUEyQkE7WUFDekMsTUFBTUE7UUFDUjtJQUNGO0lBRUFDLG9CQUFvQixPQUFPZjtRQUN6QixJQUFJLENBQUNBLFdBQVc7WUFDZEcsUUFBUVcsS0FBSyxDQUFDO1lBQ2QsT0FBTyxFQUFFO1FBQ1g7UUFFQVgsUUFBUUMsR0FBRyxDQUFDLGtDQUFrQ0o7UUFDOUMsSUFBSTtZQUNGLE1BQU1NLFdBQVcsTUFBTVQsOENBQVNBLENBQUNtQixHQUFHLENBQWlDLGFBQXVCLE9BQVZoQixXQUFVO1lBQzVGRyxRQUFRQyxHQUFHLENBQUMsc0JBQXNCRTtZQUVsQyx3REFBd0Q7WUFDeEQsTUFBTVcsV0FBVyxDQUFDWCxTQUFTTCxPQUFPLElBQUksRUFBRSxFQUFFaUIsR0FBRyxDQUFDQyxDQUFBQSxNQUFRO29CQUNwRFgsSUFBSVcsSUFBSVgsRUFBRTtvQkFDVlAsU0FBU2tCLElBQUlsQixPQUFPO29CQUNwQkQ7b0JBQ0FTLFFBQVFVLElBQUlULElBQUksQ0FBQ0YsRUFBRTtvQkFDbkJHLFVBQVVRLElBQUlULElBQUksQ0FBQ0MsUUFBUTtvQkFDM0JULE1BQU1pQixJQUFJakIsSUFBSTtvQkFDZFUsV0FBV08sSUFBSVAsU0FBUztvQkFDeEJDLFdBQVdNLElBQUlOLFNBQVM7Z0JBQzFCLElBQUlPLElBQUksQ0FDTixDQUFDQyxHQUFHQyxJQUFNLElBQUlDLEtBQUtGLEVBQUVULFNBQVMsRUFBRVksT0FBTyxLQUFLLElBQUlELEtBQUtELEVBQUVWLFNBQVMsRUFBRVksT0FBTztZQUczRSxPQUFPUDtRQUNULEVBQUUsT0FBT0gsT0FBTztZQUNkWCxRQUFRVyxLQUFLLENBQUMsNEJBQTRCQTtZQUMxQyxNQUFNQTtRQUNSO0lBQ0Y7QUFDRixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9saWIvYXBpL21lc3NhZ2VzLnRzPzA1YTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXBpQ2xpZW50IH0gZnJvbSAnLi9jbGllbnQnO1xyXG5cclxuLy8gTWVzc2FnZSB0eXBlcyBmcm9tIHRoZSBKYXZhIGVudW1cclxuZXhwb3J0IHR5cGUgTWVzc2FnZVR5cGUgPSAnVEVYVCcgfCAnU1lTVEVNJyB8ICdUSFJFQUQnIHwgJ1JFUExZJztcclxuXHJcbmludGVyZmFjZSBNZXNzYWdlIHtcclxuICBpZDogc3RyaW5nO1xyXG4gIGNvbnRlbnQ6IHN0cmluZztcclxuICBjaGFubmVsSWQ6IHN0cmluZztcclxuICB1c2VySWQ6IHN0cmluZztcclxuICB1c2VybmFtZTogc3RyaW5nO1xyXG4gIHR5cGU6IE1lc3NhZ2VUeXBlO1xyXG4gIGNyZWF0ZWRBdDogc3RyaW5nO1xyXG4gIHVwZGF0ZWRBdD86IHN0cmluZztcclxuICB0aHJlYWRJZD86IHN0cmluZztcclxufVxyXG5cclxuaW50ZXJmYWNlIENyZWF0ZU1lc3NhZ2VSZXF1ZXN0IHtcclxuICBjb250ZW50OiBzdHJpbmc7XHJcbiAgdHlwZTogTWVzc2FnZVR5cGU7XHJcbn1cclxuXHJcbmludGVyZmFjZSBNZXNzYWdlUmVzcG9uc2Uge1xyXG4gIGlkOiBzdHJpbmc7XHJcbiAgY29udGVudDogc3RyaW5nO1xyXG4gIHR5cGU6IE1lc3NhZ2VUeXBlO1xyXG4gIGNyZWF0ZWRBdDogc3RyaW5nO1xyXG4gIHVwZGF0ZWRBdD86IHN0cmluZztcclxuICB1c2VyOiB7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgdXNlcm5hbWU6IHN0cmluZztcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgbWVzc2FnZXNBcGkgPSB7XHJcbiAgc2VuZE1lc3NhZ2U6IGFzeW5jIChjaGFubmVsSWQ6IHN0cmluZywgY29udGVudDogc3RyaW5nLCB0eXBlOiBNZXNzYWdlVHlwZSA9ICdURVhUJyk6IFByb21pc2U8TWVzc2FnZT4gPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ1NlbmRpbmcgbWVzc2FnZTonLCB7IGNoYW5uZWxJZCwgY29udGVudCwgdHlwZSB9KTtcclxuICAgIGNvbnN0IHJlcXVlc3RCb2R5OiBDcmVhdGVNZXNzYWdlUmVxdWVzdCA9IHsgXHJcbiAgICAgIGNvbnRlbnQsXHJcbiAgICAgIHR5cGVcclxuICAgIH07XHJcbiAgICBcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpQ2xpZW50LnBvc3Q8TWVzc2FnZVJlc3BvbnNlPihgL2NoYW5uZWxzLyR7Y2hhbm5lbElkfS9tZXNzYWdlc2AsIHJlcXVlc3RCb2R5KTtcclxuICAgICAgY29uc29sZS5sb2coJ01lc3NhZ2Ugc2VudCBzdWNjZXNzZnVsbHk6JywgcmVzcG9uc2UpO1xyXG4gICAgICBcclxuICAgICAgLy8gVHJhbnNmb3JtIHRoZSByZXNwb25zZSB0byBtYXRjaCBvdXIgTWVzc2FnZSBpbnRlcmZhY2VcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBpZDogcmVzcG9uc2UuaWQsXHJcbiAgICAgICAgY29udGVudDogcmVzcG9uc2UuY29udGVudCxcclxuICAgICAgICBjaGFubmVsSWQsXHJcbiAgICAgICAgdXNlcklkOiByZXNwb25zZS51c2VyLmlkLFxyXG4gICAgICAgIHVzZXJuYW1lOiByZXNwb25zZS51c2VyLnVzZXJuYW1lLFxyXG4gICAgICAgIHR5cGU6IHJlc3BvbnNlLnR5cGUsXHJcbiAgICAgICAgY3JlYXRlZEF0OiByZXNwb25zZS5jcmVhdGVkQXQsXHJcbiAgICAgICAgdXBkYXRlZEF0OiByZXNwb25zZS51cGRhdGVkQXRcclxuICAgICAgfTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBzZW5kIG1lc3NhZ2U6JywgZXJyb3IpO1xyXG4gICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICBnZXRDaGFubmVsTWVzc2FnZXM6IGFzeW5jIChjaGFubmVsSWQ6IHN0cmluZyk6IFByb21pc2U8TWVzc2FnZVtdPiA9PiB7XHJcbiAgICBpZiAoIWNoYW5uZWxJZCkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdObyBjaGFubmVsIElEIHByb3ZpZGVkIHRvIGdldENoYW5uZWxNZXNzYWdlcycpO1xyXG4gICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcblxyXG4gICAgY29uc29sZS5sb2coJ0ZldGNoaW5nIG1lc3NhZ2VzIGZvciBjaGFubmVsOicsIGNoYW5uZWxJZCk7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaUNsaWVudC5nZXQ8eyBjb250ZW50OiBNZXNzYWdlUmVzcG9uc2VbXSB9PihgL2NoYW5uZWxzLyR7Y2hhbm5lbElkfS9tZXNzYWdlc2ApO1xyXG4gICAgICBjb25zb2xlLmxvZygnUmVjZWl2ZWQgbWVzc2FnZXM6JywgcmVzcG9uc2UpO1xyXG4gICAgICBcclxuICAgICAgLy8gVHJhbnNmb3JtIHRoZSByZXNwb25zZSB0byBtYXRjaCBvdXIgTWVzc2FnZSBpbnRlcmZhY2VcclxuICAgICAgY29uc3QgbWVzc2FnZXMgPSAocmVzcG9uc2UuY29udGVudCB8fCBbXSkubWFwKG1zZyA9PiAoe1xyXG4gICAgICAgIGlkOiBtc2cuaWQsXHJcbiAgICAgICAgY29udGVudDogbXNnLmNvbnRlbnQsXHJcbiAgICAgICAgY2hhbm5lbElkLFxyXG4gICAgICAgIHVzZXJJZDogbXNnLnVzZXIuaWQsXHJcbiAgICAgICAgdXNlcm5hbWU6IG1zZy51c2VyLnVzZXJuYW1lLFxyXG4gICAgICAgIHR5cGU6IG1zZy50eXBlLFxyXG4gICAgICAgIGNyZWF0ZWRBdDogbXNnLmNyZWF0ZWRBdCxcclxuICAgICAgICB1cGRhdGVkQXQ6IG1zZy51cGRhdGVkQXRcclxuICAgICAgfSkpLnNvcnQoXHJcbiAgICAgICAgKGEsIGIpID0+IG5ldyBEYXRlKGEuY3JlYXRlZEF0KS5nZXRUaW1lKCkgLSBuZXcgRGF0ZShiLmNyZWF0ZWRBdCkuZ2V0VGltZSgpXHJcbiAgICAgICk7XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gbWVzc2FnZXM7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBtZXNzYWdlczonLCBlcnJvcik7XHJcbiAgICAgIHRocm93IGVycm9yO1xyXG4gICAgfVxyXG4gIH1cclxufTtcclxuIl0sIm5hbWVzIjpbImFwaUNsaWVudCIsIm1lc3NhZ2VzQXBpIiwic2VuZE1lc3NhZ2UiLCJjaGFubmVsSWQiLCJjb250ZW50IiwidHlwZSIsImNvbnNvbGUiLCJsb2ciLCJyZXF1ZXN0Qm9keSIsInJlc3BvbnNlIiwicG9zdCIsImlkIiwidXNlcklkIiwidXNlciIsInVzZXJuYW1lIiwiY3JlYXRlZEF0IiwidXBkYXRlZEF0IiwiZXJyb3IiLCJnZXRDaGFubmVsTWVzc2FnZXMiLCJnZXQiLCJtZXNzYWdlcyIsIm1hcCIsIm1zZyIsInNvcnQiLCJhIiwiYiIsIkRhdGUiLCJnZXRUaW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api/messages.ts\n"));

/***/ })

});