"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/api/channels.ts":
/*!*********************************!*\
  !*** ./src/lib/api/channels.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   channelsApi: function() { return /* binding */ channelsApi; }\n/* harmony export */ });\n/* harmony import */ var _users__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./users */ \"(app-pages-browser)/./src/lib/api/users.ts\");\n\nconst API_BASE = \"/api\";\nconst channelsApi = {\n    list: async ()=>{\n        console.log(\"Fetching all channels from:\", \"\".concat(API_BASE, \"/channels\"));\n        try {\n            const response = await fetch(\"\".concat(API_BASE, \"/channels\"), {\n                method: \"GET\",\n                headers: {\n                    \"Accept\": \"application/json\"\n                }\n            });\n            console.log(\"Channel list response status:\", response.status);\n            const responseText = await response.text();\n            console.log(\"Channel list raw response:\", responseText);\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch channels: \".concat(responseText));\n            }\n            const data = JSON.parse(responseText);\n            console.log(\"Parsed channel list:\", data);\n            // If the response is an array, use it directly; if it has a channels property, use that\n            const channels = Array.isArray(data) ? data : data.channels || [];\n            console.log(\"Final channels list:\", channels);\n            return channels;\n        } catch (error) {\n            console.error(\"Error fetching channels:\", error);\n            throw error;\n        }\n    },\n    create: async (name, type)=>{\n        // First, get the current user's ID\n        console.log(\"Fetching user ID for testuser...\");\n        const user = await _users__WEBPACK_IMPORTED_MODULE_0__.usersApi.getUserByName(\"testuser\");\n        console.log(\"Got user ID:\", user.id);\n        const url = \"\".concat(API_BASE, \"/channels\");\n        const requestBody = {\n            name,\n            type,\n            creatorId: user.id\n        };\n        console.log(\"Creating channel:\", {\n            url,\n            body: requestBody,\n            method: \"POST\"\n        });\n        const response = await fetch(url, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            },\n            body: JSON.stringify(requestBody)\n        });\n        console.log(\"Create channel response status:\", response.status);\n        const responseText = await response.text();\n        console.log(\"Create channel response:\", responseText);\n        if (!response.ok) {\n            throw new Error(\"Failed to create channel: \".concat(responseText));\n        }\n        const data = JSON.parse(responseText);\n        console.log(\"Created channel:\", data);\n        return data;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvYXBpL2NoYW5uZWxzLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW1DO0FBcUNuQyxNQUFNQyxXQUFXO0FBRVYsTUFBTUMsY0FBYztJQUN6QkMsTUFBTTtRQUNKQyxRQUFRQyxHQUFHLENBQUMsK0JBQStCLEdBQVksT0FBVEosVUFBUztRQUN2RCxJQUFJO1lBQ0YsTUFBTUssV0FBVyxNQUFNQyxNQUFNLEdBQVksT0FBVE4sVUFBUyxjQUFZO2dCQUNuRE8sUUFBUTtnQkFDUkMsU0FBUztvQkFDUCxVQUFVO2dCQUNaO1lBQ0Y7WUFFQUwsUUFBUUMsR0FBRyxDQUFDLGlDQUFpQ0MsU0FBU0ksTUFBTTtZQUM1RCxNQUFNQyxlQUFlLE1BQU1MLFNBQVNNLElBQUk7WUFDeENSLFFBQVFDLEdBQUcsQ0FBQyw4QkFBOEJNO1lBRTFDLElBQUksQ0FBQ0wsU0FBU08sRUFBRSxFQUFFO2dCQUNoQixNQUFNLElBQUlDLE1BQU0sNkJBQTBDLE9BQWJIO1lBQy9DO1lBRUEsTUFBTUksT0FBT0MsS0FBS0MsS0FBSyxDQUFDTjtZQUN4QlAsUUFBUUMsR0FBRyxDQUFDLHdCQUF3QlU7WUFFcEMsd0ZBQXdGO1lBQ3hGLE1BQU1HLFdBQVdDLE1BQU1DLE9BQU8sQ0FBQ0wsUUFBUUEsT0FBT0EsS0FBS0csUUFBUSxJQUFJLEVBQUU7WUFDakVkLFFBQVFDLEdBQUcsQ0FBQyx3QkFBd0JhO1lBRXBDLE9BQU9BO1FBQ1QsRUFBRSxPQUFPRyxPQUFPO1lBQ2RqQixRQUFRaUIsS0FBSyxDQUFDLDRCQUE0QkE7WUFDMUMsTUFBTUE7UUFDUjtJQUNGO0lBRUFDLFFBQVEsT0FBT0MsTUFBY0M7UUFDM0IsbUNBQW1DO1FBQ25DcEIsUUFBUUMsR0FBRyxDQUFDO1FBQ1osTUFBTW9CLE9BQU8sTUFBTXpCLDRDQUFRQSxDQUFDMEIsYUFBYSxDQUFDO1FBQzFDdEIsUUFBUUMsR0FBRyxDQUFDLGdCQUFnQm9CLEtBQUtFLEVBQUU7UUFFbkMsTUFBTUMsTUFBTSxHQUFZLE9BQVQzQixVQUFTO1FBQ3hCLE1BQU00QixjQUFjO1lBQ2xCTjtZQUNBQztZQUNBTSxXQUFXTCxLQUFLRSxFQUFFO1FBQ3BCO1FBRUF2QixRQUFRQyxHQUFHLENBQUMscUJBQXFCO1lBQy9CdUI7WUFDQUcsTUFBTUY7WUFDTnJCLFFBQVE7UUFDVjtRQUVBLE1BQU1GLFdBQVcsTUFBTUMsTUFBTXFCLEtBQUs7WUFDaENwQixRQUFRO1lBQ1JDLFNBQVM7Z0JBQ1AsZ0JBQWdCO2dCQUNoQixVQUFVO1lBQ1o7WUFDQXNCLE1BQU1mLEtBQUtnQixTQUFTLENBQUNIO1FBQ3ZCO1FBRUF6QixRQUFRQyxHQUFHLENBQUMsbUNBQW1DQyxTQUFTSSxNQUFNO1FBQzlELE1BQU1DLGVBQWUsTUFBTUwsU0FBU00sSUFBSTtRQUN4Q1IsUUFBUUMsR0FBRyxDQUFDLDRCQUE0Qk07UUFFeEMsSUFBSSxDQUFDTCxTQUFTTyxFQUFFLEVBQUU7WUFDaEIsTUFBTSxJQUFJQyxNQUFNLDZCQUEwQyxPQUFiSDtRQUMvQztRQUVBLE1BQU1JLE9BQU9DLEtBQUtDLEtBQUssQ0FBQ047UUFDeEJQLFFBQVFDLEdBQUcsQ0FBQyxvQkFBb0JVO1FBQ2hDLE9BQU9BO0lBQ1Q7QUFDRixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9saWIvYXBpL2NoYW5uZWxzLnRzPzZjMGEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlcnNBcGkgfSBmcm9tICcuL3VzZXJzJztcclxuXHJcbmV4cG9ydCB0eXBlIENoYW5uZWxUeXBlID0gJ1BVQkxJQycgfCAnUFJJVkFURScgfCAnRElSRUNUX01FU1NBR0UnO1xyXG5leHBvcnQgdHlwZSBDcmVhdGVDaGFubmVsVHlwZSA9ICdQVUJMSUMnIHwgJ1BSSVZBVEUnO1xyXG5cclxuaW50ZXJmYWNlIFVzZXJSZXNwb25zZSB7XHJcbiAgaWQ6IHN0cmluZztcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgY3JlYXRlZEF0OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2hhbm5lbCB7XHJcbiAgaWQ6IHN0cmluZztcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgdHlwZTogQ2hhbm5lbFR5cGU7XHJcbiAgY3JlYXRlZEF0OiBzdHJpbmc7XHJcbiAgbWVtYmVyczogVXNlclJlc3BvbnNlW107XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ3JlYXRlQ2hhbm5lbFJlcXVlc3Qge1xyXG4gIG5hbWU6IHN0cmluZztcclxuICB0eXBlOiBDcmVhdGVDaGFubmVsVHlwZTtcclxuICBjcmVhdG9ySWQ6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDcmVhdGVDaGFubmVsUmVzcG9uc2Uge1xyXG4gIGlkOiBzdHJpbmc7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIHR5cGU6IENoYW5uZWxUeXBlO1xyXG4gIGNyZWF0ZWRBdDogc3RyaW5nO1xyXG4gIG1lbWJlcnM6IFVzZXJSZXNwb25zZVtdO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIExpc3RDaGFubmVsc1Jlc3BvbnNlIHtcclxuICBjaGFubmVsczogQ2hhbm5lbFtdO1xyXG59XHJcblxyXG5jb25zdCBBUElfQkFTRSA9ICcvYXBpJztcclxuXHJcbmV4cG9ydCBjb25zdCBjaGFubmVsc0FwaSA9IHtcclxuICBsaXN0OiBhc3luYyAoKTogUHJvbWlzZTxDaGFubmVsW10+ID0+IHtcclxuICAgIGNvbnNvbGUubG9nKCdGZXRjaGluZyBhbGwgY2hhbm5lbHMgZnJvbTonLCBgJHtBUElfQkFTRX0vY2hhbm5lbHNgKTtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QVBJX0JBU0V9L2NoYW5uZWxzYCwge1xyXG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICB9LFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKCdDaGFubmVsIGxpc3QgcmVzcG9uc2Ugc3RhdHVzOicsIHJlc3BvbnNlLnN0YXR1cyk7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlVGV4dCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcclxuICAgICAgY29uc29sZS5sb2coJ0NoYW5uZWwgbGlzdCByYXcgcmVzcG9uc2U6JywgcmVzcG9uc2VUZXh0KTtcclxuXHJcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBmZXRjaCBjaGFubmVsczogJHtyZXNwb25zZVRleHR9YCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKHJlc3BvbnNlVGV4dCk7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdQYXJzZWQgY2hhbm5lbCBsaXN0OicsIGRhdGEpO1xyXG5cclxuICAgICAgLy8gSWYgdGhlIHJlc3BvbnNlIGlzIGFuIGFycmF5LCB1c2UgaXQgZGlyZWN0bHk7IGlmIGl0IGhhcyBhIGNoYW5uZWxzIHByb3BlcnR5LCB1c2UgdGhhdFxyXG4gICAgICBjb25zdCBjaGFubmVscyA9IEFycmF5LmlzQXJyYXkoZGF0YSkgPyBkYXRhIDogZGF0YS5jaGFubmVscyB8fCBbXTtcclxuICAgICAgY29uc29sZS5sb2coJ0ZpbmFsIGNoYW5uZWxzIGxpc3Q6JywgY2hhbm5lbHMpO1xyXG4gICAgICBcclxuICAgICAgcmV0dXJuIGNoYW5uZWxzO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgY2hhbm5lbHM6JywgZXJyb3IpO1xyXG4gICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICBjcmVhdGU6IGFzeW5jIChuYW1lOiBzdHJpbmcsIHR5cGU6IENyZWF0ZUNoYW5uZWxUeXBlKTogUHJvbWlzZTxDaGFubmVsPiA9PiB7XHJcbiAgICAvLyBGaXJzdCwgZ2V0IHRoZSBjdXJyZW50IHVzZXIncyBJRFxyXG4gICAgY29uc29sZS5sb2coJ0ZldGNoaW5nIHVzZXIgSUQgZm9yIHRlc3R1c2VyLi4uJyk7XHJcbiAgICBjb25zdCB1c2VyID0gYXdhaXQgdXNlcnNBcGkuZ2V0VXNlckJ5TmFtZSgndGVzdHVzZXInKTtcclxuICAgIGNvbnNvbGUubG9nKCdHb3QgdXNlciBJRDonLCB1c2VyLmlkKTtcclxuXHJcbiAgICBjb25zdCB1cmwgPSBgJHtBUElfQkFTRX0vY2hhbm5lbHNgO1xyXG4gICAgY29uc3QgcmVxdWVzdEJvZHkgPSB7IFxyXG4gICAgICBuYW1lLFxyXG4gICAgICB0eXBlLFxyXG4gICAgICBjcmVhdG9ySWQ6IHVzZXIuaWRcclxuICAgIH07XHJcbiAgICBcclxuICAgIGNvbnNvbGUubG9nKCdDcmVhdGluZyBjaGFubmVsOicsIHtcclxuICAgICAgdXJsLFxyXG4gICAgICBib2R5OiByZXF1ZXN0Qm9keSxcclxuICAgICAgbWV0aG9kOiAnUE9TVCdcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCB7XHJcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICB9LFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0Qm9keSksXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zb2xlLmxvZygnQ3JlYXRlIGNoYW5uZWwgcmVzcG9uc2Ugc3RhdHVzOicsIHJlc3BvbnNlLnN0YXR1cyk7XHJcbiAgICBjb25zdCByZXNwb25zZVRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XHJcbiAgICBjb25zb2xlLmxvZygnQ3JlYXRlIGNoYW5uZWwgcmVzcG9uc2U6JywgcmVzcG9uc2VUZXh0KTtcclxuXHJcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGNyZWF0ZSBjaGFubmVsOiAke3Jlc3BvbnNlVGV4dH1gKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShyZXNwb25zZVRleHQpO1xyXG4gICAgY29uc29sZS5sb2coJ0NyZWF0ZWQgY2hhbm5lbDonLCBkYXRhKTtcclxuICAgIHJldHVybiBkYXRhO1xyXG4gIH0sXHJcbn07XHJcbiJdLCJuYW1lcyI6WyJ1c2Vyc0FwaSIsIkFQSV9CQVNFIiwiY2hhbm5lbHNBcGkiLCJsaXN0IiwiY29uc29sZSIsImxvZyIsInJlc3BvbnNlIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwic3RhdHVzIiwicmVzcG9uc2VUZXh0IiwidGV4dCIsIm9rIiwiRXJyb3IiLCJkYXRhIiwiSlNPTiIsInBhcnNlIiwiY2hhbm5lbHMiLCJBcnJheSIsImlzQXJyYXkiLCJlcnJvciIsImNyZWF0ZSIsIm5hbWUiLCJ0eXBlIiwidXNlciIsImdldFVzZXJCeU5hbWUiLCJpZCIsInVybCIsInJlcXVlc3RCb2R5IiwiY3JlYXRvcklkIiwiYm9keSIsInN0cmluZ2lmeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api/channels.ts\n"));

/***/ })

});