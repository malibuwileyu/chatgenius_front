"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/api/channels.ts":
/*!*********************************!*\
  !*** ./src/lib/api/channels.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   channelsApi: function() { return /* binding */ channelsApi; }\n/* harmony export */ });\nconst API_BASE = \"/api\";\nconst channelsApi = {\n    list: async ()=>{\n        console.log(\"Fetching all channels from:\", \"\".concat(API_BASE, \"/channels\"));\n        try {\n            const response = await fetch(\"\".concat(API_BASE, \"/channels\"), {\n                method: \"GET\",\n                headers: {\n                    \"Accept\": \"application/json\"\n                }\n            });\n            console.log(\"Channel list response status:\", response.status);\n            const responseText = await response.text();\n            console.log(\"Channel list raw response:\", responseText);\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch channels: \".concat(responseText));\n            }\n            const data = JSON.parse(responseText);\n            console.log(\"Parsed channel list:\", data);\n            // If the response is an array, use it directly; if it has a channels property, use that\n            const channels = Array.isArray(data) ? data : data.channels || [];\n            console.log(\"Final channels list:\", channels);\n            return channels;\n        } catch (error) {\n            console.error(\"Error fetching channels:\", error);\n            throw error;\n        }\n    },\n    create: async (request)=>{\n        const url = \"\".concat(API_BASE, \"/channels\");\n        const requestBody = {\n            name: request.name,\n            type: request.type,\n            creatorId: request.creatorId\n        };\n        console.log(\"Creating channel:\", {\n            url,\n            body: requestBody,\n            method: \"POST\"\n        });\n        const response = await fetch(url, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            },\n            body: JSON.stringify(requestBody)\n        });\n        console.log(\"Create channel response status:\", response.status);\n        const responseText = await response.text();\n        console.log(\"Create channel response:\", responseText);\n        if (!response.ok) {\n            throw new Error(\"Failed to create channel: \".concat(responseText));\n        }\n        const data = JSON.parse(responseText);\n        console.log(\"Created channel:\", data);\n        return data;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvYXBpL2NoYW5uZWxzLnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFtQ0EsTUFBTUEsV0FBVztBQUVWLE1BQU1DLGNBQWM7SUFDekJDLE1BQU07UUFDSkMsUUFBUUMsR0FBRyxDQUFDLCtCQUErQixHQUFZLE9BQVRKLFVBQVM7UUFDdkQsSUFBSTtZQUNGLE1BQU1LLFdBQVcsTUFBTUMsTUFBTSxHQUFZLE9BQVROLFVBQVMsY0FBWTtnQkFDbkRPLFFBQVE7Z0JBQ1JDLFNBQVM7b0JBQ1AsVUFBVTtnQkFDWjtZQUNGO1lBRUFMLFFBQVFDLEdBQUcsQ0FBQyxpQ0FBaUNDLFNBQVNJLE1BQU07WUFDNUQsTUFBTUMsZUFBZSxNQUFNTCxTQUFTTSxJQUFJO1lBQ3hDUixRQUFRQyxHQUFHLENBQUMsOEJBQThCTTtZQUUxQyxJQUFJLENBQUNMLFNBQVNPLEVBQUUsRUFBRTtnQkFDaEIsTUFBTSxJQUFJQyxNQUFNLDZCQUEwQyxPQUFiSDtZQUMvQztZQUVBLE1BQU1JLE9BQU9DLEtBQUtDLEtBQUssQ0FBQ047WUFDeEJQLFFBQVFDLEdBQUcsQ0FBQyx3QkFBd0JVO1lBRXBDLHdGQUF3RjtZQUN4RixNQUFNRyxXQUFXQyxNQUFNQyxPQUFPLENBQUNMLFFBQVFBLE9BQU9BLEtBQUtHLFFBQVEsSUFBSSxFQUFFO1lBQ2pFZCxRQUFRQyxHQUFHLENBQUMsd0JBQXdCYTtZQUVwQyxPQUFPQTtRQUNULEVBQUUsT0FBT0csT0FBTztZQUNkakIsUUFBUWlCLEtBQUssQ0FBQyw0QkFBNEJBO1lBQzFDLE1BQU1BO1FBQ1I7SUFDRjtJQUVBQyxRQUFRLE9BQU9DO1FBQ2IsTUFBTUMsTUFBTSxHQUFZLE9BQVR2QixVQUFTO1FBQ3hCLE1BQU13QixjQUFjO1lBQ2xCQyxNQUFNSCxRQUFRRyxJQUFJO1lBQ2xCQyxNQUFNSixRQUFRSSxJQUFJO1lBQ2xCQyxXQUFXTCxRQUFRSyxTQUFTO1FBQzlCO1FBRUF4QixRQUFRQyxHQUFHLENBQUMscUJBQXFCO1lBQy9CbUI7WUFDQUssTUFBTUo7WUFDTmpCLFFBQVE7UUFDVjtRQUVBLE1BQU1GLFdBQVcsTUFBTUMsTUFBTWlCLEtBQUs7WUFDaENoQixRQUFRO1lBQ1JDLFNBQVM7Z0JBQ1AsZ0JBQWdCO2dCQUNoQixVQUFVO1lBQ1o7WUFDQW9CLE1BQU1iLEtBQUtjLFNBQVMsQ0FBQ0w7UUFDdkI7UUFFQXJCLFFBQVFDLEdBQUcsQ0FBQyxtQ0FBbUNDLFNBQVNJLE1BQU07UUFDOUQsTUFBTUMsZUFBZSxNQUFNTCxTQUFTTSxJQUFJO1FBQ3hDUixRQUFRQyxHQUFHLENBQUMsNEJBQTRCTTtRQUV4QyxJQUFJLENBQUNMLFNBQVNPLEVBQUUsRUFBRTtZQUNoQixNQUFNLElBQUlDLE1BQU0sNkJBQTBDLE9BQWJIO1FBQy9DO1FBRUEsTUFBTUksT0FBT0MsS0FBS0MsS0FBSyxDQUFDTjtRQUN4QlAsUUFBUUMsR0FBRyxDQUFDLG9CQUFvQlU7UUFDaEMsT0FBT0E7SUFDVDtBQUNGLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2xpYi9hcGkvY2hhbm5lbHMudHM/NmMwYSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdHlwZSBDaGFubmVsVHlwZSA9ICdQVUJMSUMnIHwgJ1BSSVZBVEUnIHwgJ0RJUkVDVF9NRVNTQUdFJztcclxuZXhwb3J0IHR5cGUgQ3JlYXRlQ2hhbm5lbFR5cGUgPSAnUFVCTElDJyB8ICdQUklWQVRFJztcclxuXHJcbmludGVyZmFjZSBVc2VyUmVzcG9uc2Uge1xyXG4gIGlkOiBzdHJpbmc7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIGNyZWF0ZWRBdDogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENoYW5uZWwge1xyXG4gIGlkOiBzdHJpbmc7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIHR5cGU6IENoYW5uZWxUeXBlO1xyXG4gIGNyZWF0ZWRBdDogc3RyaW5nO1xyXG4gIG1lbWJlcnM6IFVzZXJSZXNwb25zZVtdO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENyZWF0ZUNoYW5uZWxSZXF1ZXN0IHtcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgdHlwZTogQ3JlYXRlQ2hhbm5lbFR5cGU7XHJcbiAgY3JlYXRvcklkOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ3JlYXRlQ2hhbm5lbFJlc3BvbnNlIHtcclxuICBpZDogc3RyaW5nO1xyXG4gIG5hbWU6IHN0cmluZztcclxuICB0eXBlOiBDaGFubmVsVHlwZTtcclxuICBjcmVhdGVkQXQ6IHN0cmluZztcclxuICBtZW1iZXJzOiBVc2VyUmVzcG9uc2VbXTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBMaXN0Q2hhbm5lbHNSZXNwb25zZSB7XHJcbiAgY2hhbm5lbHM6IENoYW5uZWxbXTtcclxufVxyXG5cclxuY29uc3QgQVBJX0JBU0UgPSAnL2FwaSc7XHJcblxyXG5leHBvcnQgY29uc3QgY2hhbm5lbHNBcGkgPSB7XHJcbiAgbGlzdDogYXN5bmMgKCk6IFByb21pc2U8Q2hhbm5lbFtdPiA9PiB7XHJcbiAgICBjb25zb2xlLmxvZygnRmV0Y2hpbmcgYWxsIGNoYW5uZWxzIGZyb206JywgYCR7QVBJX0JBU0V9L2NoYW5uZWxzYCk7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0FQSV9CQVNFfS9jaGFubmVsc2AsIHtcclxuICAgICAgICBtZXRob2Q6ICdHRVQnLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBjb25zb2xlLmxvZygnQ2hhbm5lbCBsaXN0IHJlc3BvbnNlIHN0YXR1czonLCByZXNwb25zZS5zdGF0dXMpO1xyXG4gICAgICBjb25zdCByZXNwb25zZVRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdDaGFubmVsIGxpc3QgcmF3IHJlc3BvbnNlOicsIHJlc3BvbnNlVGV4dCk7XHJcblxyXG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZmV0Y2ggY2hhbm5lbHM6ICR7cmVzcG9uc2VUZXh0fWApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShyZXNwb25zZVRleHQpO1xyXG4gICAgICBjb25zb2xlLmxvZygnUGFyc2VkIGNoYW5uZWwgbGlzdDonLCBkYXRhKTtcclxuXHJcbiAgICAgIC8vIElmIHRoZSByZXNwb25zZSBpcyBhbiBhcnJheSwgdXNlIGl0IGRpcmVjdGx5OyBpZiBpdCBoYXMgYSBjaGFubmVscyBwcm9wZXJ0eSwgdXNlIHRoYXRcclxuICAgICAgY29uc3QgY2hhbm5lbHMgPSBBcnJheS5pc0FycmF5KGRhdGEpID8gZGF0YSA6IGRhdGEuY2hhbm5lbHMgfHwgW107XHJcbiAgICAgIGNvbnNvbGUubG9nKCdGaW5hbCBjaGFubmVscyBsaXN0OicsIGNoYW5uZWxzKTtcclxuICAgICAgXHJcbiAgICAgIHJldHVybiBjaGFubmVscztcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGNoYW5uZWxzOicsIGVycm9yKTtcclxuICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgY3JlYXRlOiBhc3luYyAocmVxdWVzdDogQ3JlYXRlQ2hhbm5lbFJlcXVlc3QpOiBQcm9taXNlPENoYW5uZWw+ID0+IHtcclxuICAgIGNvbnN0IHVybCA9IGAke0FQSV9CQVNFfS9jaGFubmVsc2A7XHJcbiAgICBjb25zdCByZXF1ZXN0Qm9keSA9IHsgXHJcbiAgICAgIG5hbWU6IHJlcXVlc3QubmFtZSwgXHJcbiAgICAgIHR5cGU6IHJlcXVlc3QudHlwZSxcclxuICAgICAgY3JlYXRvcklkOiByZXF1ZXN0LmNyZWF0b3JJZFxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgY29uc29sZS5sb2coJ0NyZWF0aW5nIGNoYW5uZWw6Jywge1xyXG4gICAgICB1cmwsXHJcbiAgICAgIGJvZHk6IHJlcXVlc3RCb2R5LFxyXG4gICAgICBtZXRob2Q6ICdQT1NUJ1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHtcclxuICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgIH0sXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlcXVlc3RCb2R5KSxcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKCdDcmVhdGUgY2hhbm5lbCByZXNwb25zZSBzdGF0dXM6JywgcmVzcG9uc2Uuc3RhdHVzKTtcclxuICAgIGNvbnN0IHJlc3BvbnNlVGV4dCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcclxuICAgIGNvbnNvbGUubG9nKCdDcmVhdGUgY2hhbm5lbCByZXNwb25zZTonLCByZXNwb25zZVRleHQpO1xyXG5cclxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gY3JlYXRlIGNoYW5uZWw6ICR7cmVzcG9uc2VUZXh0fWApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKHJlc3BvbnNlVGV4dCk7XHJcbiAgICBjb25zb2xlLmxvZygnQ3JlYXRlZCBjaGFubmVsOicsIGRhdGEpO1xyXG4gICAgcmV0dXJuIGRhdGE7XHJcbiAgfSxcclxufTtcclxuIl0sIm5hbWVzIjpbIkFQSV9CQVNFIiwiY2hhbm5lbHNBcGkiLCJsaXN0IiwiY29uc29sZSIsImxvZyIsInJlc3BvbnNlIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwic3RhdHVzIiwicmVzcG9uc2VUZXh0IiwidGV4dCIsIm9rIiwiRXJyb3IiLCJkYXRhIiwiSlNPTiIsInBhcnNlIiwiY2hhbm5lbHMiLCJBcnJheSIsImlzQXJyYXkiLCJlcnJvciIsImNyZWF0ZSIsInJlcXVlc3QiLCJ1cmwiLCJyZXF1ZXN0Qm9keSIsIm5hbWUiLCJ0eXBlIiwiY3JlYXRvcklkIiwiYm9keSIsInN0cmluZ2lmeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api/channels.ts\n"));

/***/ })

});