"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/api/messages.ts":
/*!*********************************!*\
  !*** ./src/lib/api/messages.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   messagesApi: function() { return /* binding */ messagesApi; }\n/* harmony export */ });\nconst API_BASE = \"/api\";\nconst TEST_USER_ID = \"c2abd785-adbb-41ec-baf8-13395be722a2\"; // Hardcoded testuser UUID\nconst messagesApi = {\n    sendMessage: async function(channelId, content) {\n        let type = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"TEXT\";\n        const url = \"\".concat(API_BASE, \"/channels/\").concat(channelId, \"/messages\");\n        const requestBody = {\n            content,\n            userId: TEST_USER_ID,\n            type,\n            channelId\n        };\n        console.log(\"Sending message request:\", {\n            url,\n            channelId,\n            body: requestBody,\n            method: \"POST\"\n        });\n        const response = await fetch(url, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            },\n            body: JSON.stringify(requestBody)\n        });\n        console.log(\"Response status:\", response.status);\n        const responseText = await response.text();\n        console.log(\"Response body:\", responseText);\n        if (!response.ok) {\n            console.error(\"Failed to send message:\", responseText);\n            throw new Error(\"Failed to send message: \".concat(responseText));\n        }\n        // Try to parse the response as JSON\n        let data;\n        try {\n            data = JSON.parse(responseText);\n        } catch (e) {\n            console.error(\"Failed to parse response as JSON:\", e);\n            throw new Error(\"Invalid response format from server\");\n        }\n        console.log(\"Message sent successfully:\", data);\n        return data;\n    },\n    getChannelMessages: async (channelId)=>{\n        const url = \"\".concat(API_BASE, \"/channels/\").concat(channelId, \"/messages\");\n        console.log(\"Fetching messages for channel:\", channelId);\n        const response = await fetch(url, {\n            headers: {\n                \"Accept\": \"application/json\"\n            }\n        });\n        console.log(\"Get messages response status:\", response.status);\n        const responseText = await response.text();\n        console.log(\"Get messages response:\", responseText);\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch messages: \".concat(responseText));\n        }\n        const data = JSON.parse(responseText);\n        console.log(\"Channel messages:\", data);\n        return Array.isArray(data) ? data : data.messages || [];\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvYXBpL21lc3NhZ2VzLnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFtQ0EsTUFBTUEsV0FBVztBQUNqQixNQUFNQyxlQUFlLHdDQUF5QywwQkFBMEI7QUFFakYsTUFBTUMsY0FBYztJQUN6QkMsYUFBYSxlQUFPQyxXQUFtQkM7WUFBaUJDLHdFQUFvQjtRQUMxRSxNQUFNQyxNQUFNLEdBQXdCSCxPQUFyQkosVUFBUyxjQUFzQixPQUFWSSxXQUFVO1FBQzlDLE1BQU1JLGNBQWM7WUFDbEJIO1lBQ0FJLFFBQVFSO1lBQ1JLO1lBQ0FGO1FBQ0Y7UUFFQU0sUUFBUUMsR0FBRyxDQUFDLDRCQUE0QjtZQUN0Q0o7WUFDQUg7WUFDQVEsTUFBTUo7WUFDTkssUUFBUTtRQUNWO1FBRUEsTUFBTUMsV0FBVyxNQUFNQyxNQUFNUixLQUFLO1lBQ2hDTSxRQUFRO1lBQ1JHLFNBQVM7Z0JBQ1AsZ0JBQWdCO2dCQUNoQixVQUFVO1lBQ1o7WUFDQUosTUFBTUssS0FBS0MsU0FBUyxDQUFDVjtRQUN2QjtRQUVBRSxRQUFRQyxHQUFHLENBQUMsb0JBQW9CRyxTQUFTSyxNQUFNO1FBQy9DLE1BQU1DLGVBQWUsTUFBTU4sU0FBU08sSUFBSTtRQUN4Q1gsUUFBUUMsR0FBRyxDQUFDLGtCQUFrQlM7UUFFOUIsSUFBSSxDQUFDTixTQUFTUSxFQUFFLEVBQUU7WUFDaEJaLFFBQVFhLEtBQUssQ0FBQywyQkFBMkJIO1lBQ3pDLE1BQU0sSUFBSUksTUFBTSwyQkFBd0MsT0FBYko7UUFDN0M7UUFFQSxvQ0FBb0M7UUFDcEMsSUFBSUs7UUFDSixJQUFJO1lBQ0ZBLE9BQU9SLEtBQUtTLEtBQUssQ0FBQ047UUFDcEIsRUFBRSxPQUFPTyxHQUFHO1lBQ1ZqQixRQUFRYSxLQUFLLENBQUMscUNBQXFDSTtZQUNuRCxNQUFNLElBQUlILE1BQU07UUFDbEI7UUFFQWQsUUFBUUMsR0FBRyxDQUFDLDhCQUE4QmM7UUFDMUMsT0FBT0E7SUFDVDtJQUVBRyxvQkFBb0IsT0FBT3hCO1FBQ3pCLE1BQU1HLE1BQU0sR0FBd0JILE9BQXJCSixVQUFTLGNBQXNCLE9BQVZJLFdBQVU7UUFDOUNNLFFBQVFDLEdBQUcsQ0FBQyxrQ0FBa0NQO1FBRTlDLE1BQU1VLFdBQVcsTUFBTUMsTUFBTVIsS0FBSztZQUNoQ1MsU0FBUztnQkFDUCxVQUFVO1lBQ1o7UUFDRjtRQUVBTixRQUFRQyxHQUFHLENBQUMsaUNBQWlDRyxTQUFTSyxNQUFNO1FBQzVELE1BQU1DLGVBQWUsTUFBTU4sU0FBU08sSUFBSTtRQUN4Q1gsUUFBUUMsR0FBRyxDQUFDLDBCQUEwQlM7UUFFdEMsSUFBSSxDQUFDTixTQUFTUSxFQUFFLEVBQUU7WUFDaEIsTUFBTSxJQUFJRSxNQUFNLDZCQUEwQyxPQUFiSjtRQUMvQztRQUVBLE1BQU1LLE9BQU9SLEtBQUtTLEtBQUssQ0FBQ047UUFDeEJWLFFBQVFDLEdBQUcsQ0FBQyxxQkFBcUJjO1FBQ2pDLE9BQU9JLE1BQU1DLE9BQU8sQ0FBQ0wsUUFBUUEsT0FBT0EsS0FBS00sUUFBUSxJQUFJLEVBQUU7SUFDekQ7QUFDRixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9saWIvYXBpL21lc3NhZ2VzLnRzPzA1YTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlcnNBcGkgfSBmcm9tICcuL3VzZXJzJztcclxuXHJcbi8vIE1lc3NhZ2UgdHlwZXMgZnJvbSB0aGUgSmF2YSBlbnVtXHJcbmV4cG9ydCB0eXBlIE1lc3NhZ2VUeXBlID0gJ1RFWFQnIHwgJ1NZU1RFTScgfCAnVEhSRUFEJyB8ICdSRVBMWSc7XHJcblxyXG5pbnRlcmZhY2UgTWVzc2FnZSB7XHJcbiAgaWQ6IHN0cmluZztcclxuICBjb250ZW50OiBzdHJpbmc7XHJcbiAgY2hhbm5lbElkOiBzdHJpbmc7XHJcbiAgdXNlcklkOiBzdHJpbmc7XHJcbiAgdHlwZTogTWVzc2FnZVR5cGU7XHJcbiAgY3JlYXRlZEF0OiBzdHJpbmc7XHJcbiAgdXBkYXRlZEF0Pzogc3RyaW5nO1xyXG4gIHRocmVhZElkPzogc3RyaW5nO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgQ3JlYXRlTWVzc2FnZVJlcXVlc3Qge1xyXG4gIGNvbnRlbnQ6IHN0cmluZztcclxuICB1c2VySWQ6IHN0cmluZztcclxuICB0eXBlOiBNZXNzYWdlVHlwZTtcclxuICBjaGFubmVsSWQ6IHN0cmluZztcclxuICB0aHJlYWRJZD86IHN0cmluZztcclxufVxyXG5cclxuaW50ZXJmYWNlIENyZWF0ZU1lc3NhZ2VSZXNwb25zZSB7XHJcbiAgaWQ6IHN0cmluZztcclxuICBjb250ZW50OiBzdHJpbmc7XHJcbiAgY2hhbm5lbElkOiBzdHJpbmc7XHJcbiAgdXNlcklkOiBzdHJpbmc7XHJcbiAgdHlwZTogTWVzc2FnZVR5cGU7XHJcbiAgY3JlYXRlZEF0OiBzdHJpbmc7XHJcbiAgdXBkYXRlZEF0Pzogc3RyaW5nO1xyXG4gIHRocmVhZElkPzogc3RyaW5nO1xyXG59XHJcblxyXG5jb25zdCBBUElfQkFTRSA9ICcvYXBpJztcclxuY29uc3QgVEVTVF9VU0VSX0lEID0gJ2MyYWJkNzg1LWFkYmItNDFlYy1iYWY4LTEzMzk1YmU3MjJhMic7ICAvLyBIYXJkY29kZWQgdGVzdHVzZXIgVVVJRFxyXG5cclxuZXhwb3J0IGNvbnN0IG1lc3NhZ2VzQXBpID0ge1xyXG4gIHNlbmRNZXNzYWdlOiBhc3luYyAoY2hhbm5lbElkOiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZywgdHlwZTogTWVzc2FnZVR5cGUgPSAnVEVYVCcpOiBQcm9taXNlPE1lc3NhZ2U+ID0+IHtcclxuICAgIGNvbnN0IHVybCA9IGAke0FQSV9CQVNFfS9jaGFubmVscy8ke2NoYW5uZWxJZH0vbWVzc2FnZXNgO1xyXG4gICAgY29uc3QgcmVxdWVzdEJvZHkgPSB7IFxyXG4gICAgICBjb250ZW50LFxyXG4gICAgICB1c2VySWQ6IFRFU1RfVVNFUl9JRCwgIC8vIFVzZSBoYXJkY29kZWQgVVVJRFxyXG4gICAgICB0eXBlLFxyXG4gICAgICBjaGFubmVsSWRcclxuICAgIH07XHJcbiAgICBcclxuICAgIGNvbnNvbGUubG9nKCdTZW5kaW5nIG1lc3NhZ2UgcmVxdWVzdDonLCB7XHJcbiAgICAgIHVybCxcclxuICAgICAgY2hhbm5lbElkLFxyXG4gICAgICBib2R5OiByZXF1ZXN0Qm9keSxcclxuICAgICAgbWV0aG9kOiAnUE9TVCdcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCB7XHJcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICB9LFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0Qm9keSksXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zb2xlLmxvZygnUmVzcG9uc2Ugc3RhdHVzOicsIHJlc3BvbnNlLnN0YXR1cyk7XHJcbiAgICBjb25zdCByZXNwb25zZVRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XHJcbiAgICBjb25zb2xlLmxvZygnUmVzcG9uc2UgYm9keTonLCByZXNwb25zZVRleHQpO1xyXG5cclxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHNlbmQgbWVzc2FnZTonLCByZXNwb25zZVRleHQpO1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBzZW5kIG1lc3NhZ2U6ICR7cmVzcG9uc2VUZXh0fWApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRyeSB0byBwYXJzZSB0aGUgcmVzcG9uc2UgYXMgSlNPTlxyXG4gICAgbGV0IGRhdGE7XHJcbiAgICB0cnkge1xyXG4gICAgICBkYXRhID0gSlNPTi5wYXJzZShyZXNwb25zZVRleHQpO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gcGFyc2UgcmVzcG9uc2UgYXMgSlNPTjonLCBlKTtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHJlc3BvbnNlIGZvcm1hdCBmcm9tIHNlcnZlcicpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnNvbGUubG9nKCdNZXNzYWdlIHNlbnQgc3VjY2Vzc2Z1bGx5OicsIGRhdGEpO1xyXG4gICAgcmV0dXJuIGRhdGE7XHJcbiAgfSxcclxuXHJcbiAgZ2V0Q2hhbm5lbE1lc3NhZ2VzOiBhc3luYyAoY2hhbm5lbElkOiBzdHJpbmcpOiBQcm9taXNlPE1lc3NhZ2VbXT4gPT4ge1xyXG4gICAgY29uc3QgdXJsID0gYCR7QVBJX0JBU0V9L2NoYW5uZWxzLyR7Y2hhbm5lbElkfS9tZXNzYWdlc2A7XHJcbiAgICBjb25zb2xlLmxvZygnRmV0Y2hpbmcgbWVzc2FnZXMgZm9yIGNoYW5uZWw6JywgY2hhbm5lbElkKTtcclxuXHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwge1xyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKCdHZXQgbWVzc2FnZXMgcmVzcG9uc2Ugc3RhdHVzOicsIHJlc3BvbnNlLnN0YXR1cyk7XHJcbiAgICBjb25zdCByZXNwb25zZVRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XHJcbiAgICBjb25zb2xlLmxvZygnR2V0IG1lc3NhZ2VzIHJlc3BvbnNlOicsIHJlc3BvbnNlVGV4dCk7XHJcblxyXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBmZXRjaCBtZXNzYWdlczogJHtyZXNwb25zZVRleHR9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UocmVzcG9uc2VUZXh0KTtcclxuICAgIGNvbnNvbGUubG9nKCdDaGFubmVsIG1lc3NhZ2VzOicsIGRhdGEpO1xyXG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZGF0YSkgPyBkYXRhIDogZGF0YS5tZXNzYWdlcyB8fCBbXTtcclxuICB9LFxyXG59O1xyXG4iXSwibmFtZXMiOlsiQVBJX0JBU0UiLCJURVNUX1VTRVJfSUQiLCJtZXNzYWdlc0FwaSIsInNlbmRNZXNzYWdlIiwiY2hhbm5lbElkIiwiY29udGVudCIsInR5cGUiLCJ1cmwiLCJyZXF1ZXN0Qm9keSIsInVzZXJJZCIsImNvbnNvbGUiLCJsb2ciLCJib2R5IiwibWV0aG9kIiwicmVzcG9uc2UiLCJmZXRjaCIsImhlYWRlcnMiLCJKU09OIiwic3RyaW5naWZ5Iiwic3RhdHVzIiwicmVzcG9uc2VUZXh0IiwidGV4dCIsIm9rIiwiZXJyb3IiLCJFcnJvciIsImRhdGEiLCJwYXJzZSIsImUiLCJnZXRDaGFubmVsTWVzc2FnZXMiLCJBcnJheSIsImlzQXJyYXkiLCJtZXNzYWdlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api/messages.ts\n"));

/***/ })

});