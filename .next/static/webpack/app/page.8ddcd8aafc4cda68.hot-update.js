"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/api/messages.ts":
/*!*********************************!*\
  !*** ./src/lib/api/messages.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   messagesApi: function() { return /* binding */ messagesApi; }\n/* harmony export */ });\nconst API_BASE = \"/api\";\nconst TEST_USER_ID = \"c2abd785-adbb-41ec-baf8-13395be722a2\"; // Hardcoded testuser UUID\nconst messagesApi = {\n    sendMessage: async function(channelId, content) {\n        let type = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"TEXT\";\n        var _data_thread;\n        const url = \"\".concat(API_BASE, \"/channels/\").concat(channelId, \"/messages\");\n        const requestBody = {\n            content,\n            userId: TEST_USER_ID,\n            type,\n            channelId\n        };\n        console.log(\"Sending message request:\", {\n            url,\n            channelId,\n            body: requestBody,\n            method: \"POST\"\n        });\n        const response = await fetch(url, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            },\n            body: JSON.stringify(requestBody)\n        });\n        console.log(\"Response status:\", response.status);\n        const responseText = await response.text();\n        console.log(\"Response body:\", responseText);\n        if (!response.ok) {\n            console.error(\"Failed to send message:\", responseText);\n            throw new Error(\"Failed to send message: \".concat(responseText));\n        }\n        // Try to parse the response as JSON\n        let data;\n        try {\n            data = JSON.parse(responseText);\n        } catch (e) {\n            console.error(\"Failed to parse response as JSON:\", e);\n            throw new Error(\"Invalid response format from server\");\n        }\n        console.log(\"Message sent successfully:\", data);\n        // Map the response to match our Message interface with username\n        return {\n            id: data.id,\n            content: data.content,\n            channelId: data.channel.id,\n            userId: data.user.id,\n            username: data.user.username,\n            type: data.type,\n            createdAt: data.createdAt,\n            updatedAt: data.updatedAt,\n            threadId: (_data_thread = data.thread) === null || _data_thread === void 0 ? void 0 : _data_thread.id\n        };\n    },\n    getChannelMessages: async (channelId)=>{\n        if (!channelId) {\n            console.error(\"No channel ID provided to getChannelMessages\");\n            return [];\n        }\n        // Ensure we're using the UUID\n        const url = \"\".concat(API_BASE, \"/channels/\").concat(channelId, \"/messages\");\n        console.log(\"Fetching messages for channel UUID:\", {\n            channelId,\n            url\n        });\n        try {\n            const response = await fetch(url, {\n                method: \"GET\",\n                headers: {\n                    \"Accept\": \"application/json\"\n                }\n            });\n            console.log(\"Get messages response status:\", response.status);\n            const responseText = await response.text();\n            console.log(\"Get messages raw response:\", responseText);\n            if (!response.ok) {\n                console.error(\"Failed to fetch messages:\", responseText);\n                throw new Error(\"Failed to fetch messages: \".concat(responseText));\n            }\n            let data;\n            try {\n                data = JSON.parse(responseText);\n            } catch (e) {\n                console.error(\"Failed to parse messages response:\", e);\n                return [];\n            }\n            // Handle paginated response format\n            const messageContent = data.content || [];\n            // Map the response to our Message interface\n            const messages = messageContent.map((msg)=>{\n                var _msg_thread;\n                return {\n                    id: msg.id,\n                    content: msg.content,\n                    channelId: msg.channel.id,\n                    userId: msg.user.id,\n                    username: msg.user.username,\n                    type: msg.type,\n                    createdAt: msg.createdAt,\n                    updatedAt: msg.updatedAt,\n                    threadId: (_msg_thread = msg.thread) === null || _msg_thread === void 0 ? void 0 : _msg_thread.id\n                };\n            });\n            console.log(\"Parsed channel messages:\", messages);\n            return messages;\n        } catch (error) {\n            console.error(\"Error in getChannelMessages:\", error);\n            throw error;\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api/messages.ts\n"));

/***/ })

});